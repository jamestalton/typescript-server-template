name: deploy
on:
    repository_dispatch:
        types: [deploy]
jobs:
    deploy:
        runs-on: ubuntu-latest

        strategy:
            matrix:
                k8s_version: [v1.18.2-k3s1]

        env:
            NAME: typescript-service
            NAMESPACE: typescript-service
            PORT: 3000
            VERSION: ${{ github.event.client_payload.version }}

        steps:
            - uses: actions/checkout@v2
              with:
                  ref: ${{ github.event.client_payload.ref }}

            - name: Set up k3s cluster
              uses: debianmaster/actions-k3s@master
              with:
                  version: ${{ matrix.k8s_version }}

            # - uses: azure/k8s-set-context@v1
            #   with:
            #     method: kubeconfig
            #     kubeconfig: <your kubeconfig>
            #     context: <context name>

            - uses: Azure/k8s-create-secret@v1
              with:
                  container-registry-username: ${{ secrets.DOCKER_USERNAME }}
                  container-registry-password: ${{ secrets.DOCKER_TOKEN }}
                  secret-name: docker-secret

            - name: Configure Deployment
              env:
                  IMAGE: ${{ secrets.DOCKER_REGISTRY }}/${{ env.NAME }}:${{ env.VERSION }}
                  REPLICAS: 1
                  INGRESS_PATH: /${{ env.NAME }}
              run: |
                  cat deploy/secret.yaml | envsubst > secret.yaml
                  cat deploy/deployment.yaml | envsubst > deployment.yaml
                  cat deploy/service.yaml | envsubst > service.yaml
                  cat deploy/ingress.yaml | envsubst > ingress.yaml

            - name: Show deployment
              run: cat deployment.yaml

            - name: Create namespace
              run: kubectl create namespace typescript-service | true

            - name: Create deployment
              run: kubectl apply -f deployment.yaml

            - name: Wait for deployment rollout
              run: kubectl rollout status -w --timeout=30s deployment/${{ env.NAME }}

            - name: Describe Pods
              if: ${{ failure() }}
              run: kubectl --namespace=${{ env.NAMESPACE }} --selector=app=${{ env.NAME }},version=${{ env.VERSION }} describe pods

            - name: Pod Logs
              if: ${{ failure() }}
              run: kubectl --namespace=${{ env.NAMESPACE }} --selector=app=${{ env.NAME }},version=${{ env.VERSION }} logs

            - name: Rollback deployment
              if: ${{ failure() }}
              run: kubectl rollout undo deployment/${{ env.NAME }} | true

            # - name: Autoscale deployment
            #   run: kubectl --namespace=${{ env.NAMESPACE }} autoscale deployment ${{ env.NAME }} --cpu-percent=10000 --min=1 --max=2

            - name: Show service
              run: cat service.yaml

            - name: Create service
              run: kubectl apply -f service.yaml

            - name: Show ingress
              run: cat ingress.yaml

            - name: Create ingress
              run: kubectl apply -f ingress.yaml

            - name: Kubernetes Test
              run: kubectl get all -n ${{ env.NAMESPACE }}
