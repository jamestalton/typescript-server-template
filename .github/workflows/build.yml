name: build

on:
    push:
        branches: [master]
    pull_request:
        branches: [master]
    schedule:
        - cron: '0 16 * * *'
jobs:
    build:
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v2

            - name: Setup Git
              run: |
                  git config --global user.name "${GITHUB_ACTOR}"
                  git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"

            - name: Setup Node.js 14.x
              if: github.event_name != 'pull_request'
              uses: actions/setup-node@v1
              with:
                  node-version: 14.x

            - name: Update Dependencies
              if: github.event_name == 'schedule'
              id: update
              run: |
                  rm -rf package-lock.json node_modules
                  npx npm-check-updates -u
                  npm install
                  npm audit fix
                  git add -u :/
                  set +e
                  git commit -m "update dependencies"
                  SKIP=$?
                  echo "::set-env name=SKIP::${SKIP}"

            - name: Update Version
              if: github.event_name != 'pull_request' && env.SKIP != '1'
              run: |
                  npm version patch
                  IMAGE=`cat package.json | jq -r .name`
                  VERSION=v`cat package.json | jq -r .version`
                  echo "::set-env name=VERSION::${VERSION}"
                  echo "::set-env name=IMAGE::${IMAGE}"

            - name: NPM Test
              if: env.SKIP != '1'
              run: |
                  npm ci
                  npm test
                  npm run lint
                  npm run check

            # - name: Docker Build
            #   if: env.SKIP != '1'
            #   run: |
            #       docker build --build-arg ${VERSION} --tag docker.pkg.github.com/${GITHUB_REPOSITORY}/${IMAGE}:latest .

            - name: Login to DockerHub
              if: github.event_name != 'pull_request' && env.SKIP != '1'
              uses: docker/login-action@v1
              with:
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_TOKEN }}

            - name: Set up Docker Buildx
              if: github.event_name != 'pull_request' && env.SKIP != '1'
              id: buildx
              uses: crazy-max/ghaction-docker-buildx@v3.3.0

            - name: Cache Docker layers
              uses: actions/cache@v2
              id: cache
              with:
                  path: /tmp/.buildx-cache
                  key: ${{ runner.os }}-buildx-${{ github.sha }}
                  restore-keys: |
                      ${{ runner.os }}-buildx-

            - name: Docker Build Args
              id: buildx_args
              run: |
                  echo ::set-output name=buildx_args::--platform linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/ppc64le \
                  --build-arg VERSION=${VERSION} \
                  --output "type=image,push=true" \
                  --tag ${{ secrets.DOCKER_REGISTRY }}/${IMAGE}:${VERSION} \
                  --tag ${{ secrets.DOCKER_REGISTRY }}/${IMAGE}:latest \
                  .

            - name: Docker Build
              if: github.event_name != 'pull_request' && env.SKIP != '1'
              run: |
                  docker buildx build \
                    --platform linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/ppc64le \
                    --build-arg VERSION=${VERSION} \
                    --output "type=image,push=true" \
                    --tag ${{ secrets.DOCKER_REGISTRY }}/${IMAGE}:${VERSION} \
                    --tag ${{ secrets.DOCKER_REGISTRY }}/${IMAGE}:latest \
                    .

            - name: Trivy and Dockle Image Scan
              if: github.event_name != 'pull_request' && env.SKIP != '1'
              uses: azure/container-scan@v0
              with:
                  image-name: docker.pkg.github.com/${{ github.repository }}/${{ env.IMAGE }}:${{ env.VERSION }}

            - name: Anchore Image Scan
              if: github.event_name != 'pull_request' && env.SKIP != '1'
              uses: anchore/scan-action@v1
              with:
                  image-reference: docker.pkg.github.com/${{ github.repository }}/${{ env.IMAGE }}:${{ env.VERSION }}
                  fail-build: true

            - name: Docker Push
              if: github.event_name != 'pull_request' && env.SKIP != '1'
              run: |
                  docker buildx build --output "type=image,push=true" ${{ steps.buildx_args.outputs.buildx_args }}

            - name: Inspect image
              if: github.event_name != 'pull_request' && env.SKIP != '1'
              run: |
                  docker buildx imagetools inspect ${{ secrets.DOCKER_REGISTRY }}/${IMAGE}:${VERSION}

            - name: Git Push
              if: github.event_name != 'pull_request' && env.SKIP != '1'
              run: |
                  git push
                  git push origin ${VERSION}

            # - name: Docker Push
            #   if: github.event_name != 'pull_request' && env.SKIP != '1'
            #   run: |
            #       echo ${{ secrets.GITHUB_TOKEN }} | docker login -u "${GITHUB_ACTOR}" --password-stdin docker.pkg.github.com
            #       docker push docker.pkg.github.com/${GITHUB_REPOSITORY}/${IMAGE}:latest
            #       docker tag docker.pkg.github.com/${GITHUB_REPOSITORY}/${IMAGE}:latest docker.pkg.github.com/${GITHUB_REPOSITORY}/${IMAGE}:${VERSION}
            #       docker push docker.pkg.github.com/${GITHUB_REPOSITORY}/${IMAGE}:${VERSION}

            # - name: Initialize CodeQL
            #   uses: github/codeql-action/init@v1

            # - name: CodeQL Autobuild
            #   uses: github/codeql-action/autobuild@v1

            # - name: CodeQL Analysis
            #   uses: github/codeql-action/analyze@v1

            - uses: debianmaster/actions-k3s@master
              if: github.event_name != 'pull_request' && env.SKIP != '1'
              with:
                  version: v1.18.2-k3s1

            # - uses: azure/k8s-set-context@v1
            #   with:
            #     method: kubeconfig
            #     kubeconfig: <your kubeconfig>
            #     context: <context name>

            - uses: Azure/k8s-create-secret@v1
              if: github.event_name != 'pull_request' && env.SKIP != '1'
              with:
                  #     container-registry-url: secrets.DOCKER_REGISTRY
                  container-registry-username: ${{ secrets.DOCKER_USERNAME }}
                  container-registry-password: ${{ secrets.DOCKER_TOKEN }}
                  secret-name: demo-k8s-secret

            # - name: Deploy to Kubernetes cluster
            #   uses: Azure/k8s-deploy@v1.1.0
            #     namespace: 'myapp'
            #     manifests: |
            #         deployment.yaml
            #         service.yaml
            #     images: |
            #       demo.azurecr.io/k8sdemo:${{ github.sha }}
            #     imagepullsecrets: |
            #       demo-k8s-secret

            - name: Kubernetes Test
              if: github.event_name != 'pull_request' && env.SKIP != '1'
              run: |
                  kubectl get all
