name: build

on:
    push:
        branches: [master]
    pull_request:
        branches: [master]
    schedule:
        - cron: '0 16 * * *'
jobs:
    build:
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v2

            - name: Setup Git
              run: |
                  git config --global user.name "${GITHUB_ACTOR}"
                  git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"

            - name: Setup Node.js 14.x
              if: github.event_name != 'pull_request'
              uses: actions/setup-node@v1
              with:
                  node-version: 14.x

            - name: Update Dependencies
              if: github.event_name == 'schedule'
              id: update
              run: |
                  rm -rf package-lock.json node_modules
                  npx npm-check-updates -u
                  npm install
                  npm audit fix
                  git add -u :/
                  set +e
                  git commit -m "update dependencies"
                  EXIT=$?
                  echo "::set-env name=EXIT::${EXIT}"

            - name: Update Version
              if: github.event_name != 'pull_request' && env.EXIT != '1'
              run: |
                  npm version patch

            - name: Docker Build
              if: github.event_name != 'pull_request' && env.EXIT != '1'
              run: |
                  VERSION=v`cat package.json | jq -r .version`
                  IMAGE=`cat package.json | jq -r .name`
                  docker build --build-arg VERSION --tag docker.pkg.github.com/${GITHUB_REPOSITORY}/${IMAGE}:latest .

            - name: NPM Test
              if: env.EXIT != '1'
              run: |
                  npm ci
                  npm test
                  npm run lint
                  npm run check

            - name: Git Push
              if: github.event_name != 'pull_request' && env.EXIT != '1'
              run: |
                  VERSION=v`cat package.json | jq -r .version`
                  git push
                  git push origin $VERSION

            - name: Docker Push
              if: github.event_name != 'pull_request' && env.EXIT != '1'
              run: |
                  VERSION=v`cat package.json | jq -r .version`
                  IMAGE=`cat package.json | jq -r .name`
                  echo ${{ secrets.GITHUB_TOKEN }} | docker login -u "${GITHUB_ACTOR}" --password-stdin docker.pkg.github.com
                  docker push docker.pkg.github.com/${GITHUB_REPOSITORY}/${IMAGE}:latest
                  docker tag docker.pkg.github.com/${GITHUB_REPOSITORY}/${IMAGE}:latest docker.pkg.github.com/${GITHUB_REPOSITORY}/${IMAGE}:$VERSION
                  docker push docker.pkg.github.com/${GITHUB_REPOSITORY}/${IMAGE}:$VERSION

            - name: Initialize CodeQL
              uses: github/codeql-action/init@v1

            - name: CodeQL Autobuild
              uses: github/codeql-action/autobuild@v1

            - name: CodeQL Analysis
              uses: github/codeql-action/analyze@v1
