name: build

on:
    push:
        branches: [master]
    pull_request:
        branches: [master]
    schedule:
        - cron: '0 16 * * *'
jobs:
    build:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2

            - name: Set up Git
              run: |
                  git config --global user.name "${GITHUB_ACTOR}"
                  git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"

            - name: Set up Node.js 12.x
              uses: actions/setup-node@v1
              with:
                  node-version: 12.x

            - name: Update Dependencies
              if: github.event_name == 'schedule'
              id: update
              run: |
                  rm -rf package-lock.json node_modules
                  npx npm-check-updates -u
                  npm install
                  npm audit fix
                  git add -u :/
                  set +e
                  git commit -m "update dependencies"
                  SKIP=$?
                  echo "::set-env name=SKIP::${SKIP}"

            - name: Update Version
              if: github.event_name != 'pull_request' && env.SKIP != '1'
              run: |
                  npm version patch
                  IMAGE=`cat package.json | jq -r .name`
                  VERSION=v`cat package.json | jq -r .version`
                  echo "::set-env name=VERSION::${VERSION}"
                  echo "::set-env name=IMAGE::${IMAGE}"

            - name: Install Dependencies
              if: env.SKIP != '1'
              run: npm ci

            - name: Unit Tests
              if: env.SKIP != '1'
              run: npm test

            - name: Linting Checks
              if: env.SKIP != '1'
              run: npm run lint

            - name: Code Formatting Checks
              if: env.SKIP != '1'
              run: npm run check

            - name: Set up Docker Buildx
              if: env.SKIP != '1'
              id: buildx
              uses: crazy-max/ghaction-docker-buildx@v3.3.0

            - name: Cache Docker layers
              if: env.SKIP != '1'
              uses: actions/cache@v2
              id: cache
              with:
                  path: /tmp/.buildx-cache
                  key: ${{ runner.os }}-buildx-${{ github.sha }}
                  restore-keys: |
                      ${{ runner.os }}-buildx-

            - name: Docker Build Args
              if: env.SKIP != '1'
              id: buildx_args
              run: |
                  echo ::set-output name=buildx_args::--platform linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/ppc64le,linux/s390x \
                  --build-arg VERSION=${VERSION} \
                  --tag ${{ secrets.DOCKER_REGISTRY }}/${IMAGE}:${VERSION} \
                  --tag ${{ secrets.DOCKER_REGISTRY }}/${IMAGE}:latest \
                  .

            - name: Docker Build
              if: env.SKIP != '1'
              run: |
                  docker buildx build ${{ steps.buildx_args.outputs.buildx_args }}
                  docker buildx build \
                      --cache-from "type=local,src=/tmp/.buildx-cache" \
                      --cache-to "type=local,dest=/tmp/.buildx-cache" \
                      --output "type=image,push=false" \
                      ${{ steps.buildx_args.outputs.buildx_args }}

            - name: Git Push
              if: github.event_name != 'pull_request' && env.SKIP != '1'
              run: |
                  git push
                  git push origin ${VERSION}

            - name: Login to DockerHub
              if: github.event_name != 'pull_request' && env.SKIP != '1'
              uses: docker/login-action@v1
              with:
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_TOKEN }}

            - name: Docker Push
              if: github.event_name != 'pull_request' && env.SKIP != '1'
              run: |
                  docker buildx build \
                      --cache-from "type=local,src=/tmp/.buildx-cache" \
                      --output "type=image,push=true" \
                      ${{ steps.buildx_args.outputs.buildx_args }}


            # - name: Inspect image
            #   if: github.event_name != 'pull_request' && env.SKIP != '1'
            #   run: |
            #       docker buildx imagetools inspect ${{ secrets.DOCKER_REGISTRY }}/${IMAGE}:${VERSION}

            # - name: Trivy and Dockle Image Scan
            #   if: github.event_name != 'pull_request' && env.SKIP != '1'
            #   uses: azure/container-scan@v0
            #   with:
            #       image-name: ${{ secrets.DOCKER_REGISTRY }}/${{ env.IMAGE }}:${{ env.VERSION }}

            # - name: Anchore Image Scan
            #   if: github.event_name != 'pull_request' && env.SKIP != '1'
            #   uses: anchore/scan-action@v1
            #   with:
            #       image-reference: ${{ secrets.DOCKER_REGISTRY }}/${{ env.IMAGE }}:${{ env.VERSION }}
            #       fail-build: true

    deploy:
        runs-on: ubuntu-latest
        if: github.event_name == 'push'
        strategy:
            matrix:
                k8s_version: [v1.18.2-k3s1]
        env:
            APP_NAMESPACE: typescript-server
        steps:
            - uses: actions/checkout@v2

            - name: Set up Git
              run: |
                  git config --global user.name "${GITHUB_ACTOR}"
                  git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"

            - name: Set up Node.js 12.x
              uses: actions/setup-node@v1
              with:
                  node-version: 12.x

            - name: Update Version
              run: |
                  npm version patch
                  IMAGE=`cat package.json | jq -r .name`
                  VERSION=v`cat package.json | jq -r .version`
                  echo "::set-env name=VERSION::${VERSION}"
                  echo "::set-env name=IMAGE::${IMAGE}"

            - name: Set up k3s cluster
              uses: debianmaster/actions-k3s@master
              with:
                  version: ${{ matrix.k8s_version }}

            # - uses: azure/k8s-set-context@v1
            #   with:
            #     method: kubeconfig
            #     kubeconfig: <your kubeconfig>
            #     context: <context name>

            - uses: Azure/k8s-create-secret@v1
              if: github.event_name != 'pull_request' && env.SKIP != '1'
              with:
                  #     container-registry-url: secrets.DOCKER_REGISTRY
                  container-registry-username: ${{ secrets.DOCKER_USERNAME }}
                  container-registry-password: ${{ secrets.DOCKER_TOKEN }}
                  secret-name: docker-secret

            - name: Configure Deployment
              if: github.event_name != 'pull_request' && env.SKIP != '1'
              env:
                  APP_NAME: typescript-server
                  APP_REPLICAS: 1
                  APP_VERSION: ${{ env.VERSION }}
                  APP_IMAGE: ${{ secrets.DOCKER_REGISTRY }}/${{ env.IMAGE }}:${{ env.VERSION }}
                  APP_INGRESS_PATH: /typescript-service
              run: |
                  cat deploy/secret.yaml | envsubst > secret.yaml
                  cat deploy/deployment.yaml | envsubst > deployment.yaml
                  cat deploy/service.yaml | envsubst > service.yaml
                  cat deploy/ingress.yaml | envsubst > ingress.yaml

            - name: Create namespace
              run: kubectl create namespace typescript-service | true

            - name: Create deployment
              run: kubectl apply -f deployment.yaml

            - name: Wait for deployment rollout
              run: kubectl rollout status -w --timeout=10s deployment/${IMAGE}

            - name: Describe Pods
              if: ${{ failure() }}
              run: kubectl --namespace=$APP_NAMESPACE --selector=app=$APP_NAME,version=v$APP_VERSION describe pods

            - name: Pod Logs
              if: ${{ failure() }}
              run: kubectl --namespace=$APP_NAMESPACE --selector=app=$APP_NAME,version=v$APP_VERSION logs

            - name: Rollback deployment
              if: ${{ failure() }}
              run: kubectl rollout undo deployment/${IMAGE} | true

            # - name: Autoscale deployment
            #   run: kubectl --namespace=$APP_NAMESPACE autoscale deployment $APP_NAME --cpu-percent=$APP_AUTOSCALE_PERCENT --min=$APP_AUTOSCALE_MIN --max=$APP_AUTOSCALE_MAX

            - name: Create service
              run: kubectl apply -f service.yaml

            - name: Create ingress
              run: kubectl apply -f ingress.yaml

            - name: Kubernetes Test
              run: kubectl get all -n typescript-service
